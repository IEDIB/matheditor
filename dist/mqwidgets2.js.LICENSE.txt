/*#__PURE__*/

/**
     * Creates a basic dialog which can be extended for further functionality
     * @param {*} title
     * @param {*} width
     * @param {*} height
*/

/**
 * Binds the submit button for all the editors within a group
 * @param gid
 * @param check_btn
 * @param extraActions
 */

/**
 * DATA-MQ ELEMENT
 * It is used to generate questions client-side
 *
 * SYNTAX on elem being p or span or div
 * <elem data-mq="qtype" data-mq-ans="a+b" data-mq-symbols="a:=1;b:=2;" data-mq-ini="?^?"
 *        data-mq-rules='{"key":"value"}' data-mq-formulation="...">
 *    Text that contains the formulation...
 * </elem>
 *
 * ATTRIBUTES
 * data-mq: can either define a type (simple, basic, cloze, panel, mchoice, mchoice*) or
 *         a base64 encoded definition of the whole activity. This last option is used to offuscate answers.
 *         In the last case, an activity generator can be used.
 * data-mq-ans: sympy representation of the answer. It can be a boolean to assert if it is true
 *              it can be an array ["","",""...] in cloze question types (it requires data-mq-ini)
 *
 * data-mq-symbols: Define symbols and default values, use := to assign values and ; to separate symbol definitions.
 *               In cloze questions an special variable called ua[i], i the index of the placeholder, is the answer
 *               that the user introduced at placeholder i. This can be used to construct a custom evaluator which
 *               returns a boolean value in data-mq-ans.
 *               Note that data-mq-ans can use any of the defined symbols. By default "x", "y", "z" are already defined
 *               as sympy symbols. No need to add them to data-mq-symbols.
 *               Define options for mchoice, mchoice* separated by comma.
 *
 * data-mq-ini: Initial latex, e.g. ?+? on every ? is a placeholder for cloze questions or
 *              an initial matrix of a given size M[3x3]
 *
 * data-mq-rules: is a map which contains the options that must be passed to the evaluator
 *    "factor": true  --> the answer must be factorized
 *    "expanded": true --> the answer must be expanded
 *    "precision": 1e-3 --> precission of numeric answers
 *    "comma_as_decimal": true --> The comma symbol in the answer will be interpreted as decimal part separator.
 *
 * data-mq-formulation (optional): Text that will be appended to the end of the formulation.
 */

/**
 * DATA-PYGEN ELEMENT
 * The questions are generated server-side by a generator in pygen server. After the question is generated and rendered
 * the validation process i equivalent to the one in DATA-MQ
 *
 * <div data-pygen="path.to.generator.fn1[r=5,complexity=1];path.to.generator.fn2;path.to.generator.fn3;"
 *      data-pygen-category="algebra.monomials" data-pygen-order="weighted:0.2,0.7,0.1"
 *      data-pygen-goal="5,6,4;10,5,*" data-pygen-celebrate="none|confetti"
 * ></div>
 *
 * data-pygen:
 *    The generator paths are the same as the ones defined in pygen.
 *    Several generators can be used by separating them with ;.
 *    Generators can be configured by setting parameters values within brackets [].
 *
 *  data-pygen-category:
 *    The category in iapace tree where the activity of the user will be stored
 *    Only if this parameter is set, a level indicador is shown in the activity
 *
 *  data-pygen-order="random"  //default
 *    This options is discarded if only one generator is defined in data-pygen.
 *    By default one activity from the ones defined in data-pygen is taken at random.
 *    However other behaviours can be defined as ordering. Assume 3 generators:
 *
 *    weighted: 0.2,0.6,0.2  Random but setting the probability at which every generator is used. Values must add 1.
 *                           In this example, most likely to generate a question from 2nd generator.
 *
 *    sequence: 3,5,8  1st generator 3 questions, 2nd generator 5 questions, 3rd generator 8 questions
 *                     and repeat in cicles if more than 3+5+8 questions are created
 *    sequence: 3,5,* 1st generator 3 questions, 2nd generator 5 questions, 3rd generator remaining questions
 *    sequence: 3,*,* start with 3 questions of the first generator and after that take at random questions from generator 2 and 3.
 *    sequence: 3,*(0.7),*(0.3) The same as above but with weights
 *
 *    Important:
 *      1. * are only allowed at the end of the sequence
 *      2. sequences will not be mantained over page reloads. So every time the page realoads, the sequence starts again.
 *
 *  data-pygen-goal:
 *     The condition to set the activity as completed. Many conditions can be set
 *     and if any of them is verified the goal flag is set.
 *     Different conditions are separated by ;. A condition takes 3 parameters
 *     <min_number_questions_answered>,<min_average_grade>,<current_level>
 *     "5,6,4;10,5,*" means
 *     5 or more questions answered, grade of 6 or more, current level 4 of more
 *     OR
 *     10 or more questions answered, grade of 5 or more, regardless of the current level
 *
 * data-pygen-celebrate="none|confetti"
 *     Say whether to celebrate or not when the goal is reached!
 */

/**
 * Extracts useful information from the current Moodle page
 * @returns
 */

/**
 * Mathquill groups are marked with the class pw-mq-group
 * All data-mq inserted within a group will only have one submit button,
 * so all answers will be sent to the check server at once
 */

/************************************************************************/

/******/

/***/

//     ev.preventDefault();

// As string

// Assume that everything is encoded in data-mq atribute

// Base64 conversion

// Case on boost

// Change july2020: isTeacher, chapterid --> boost detection

// Change june2020: Allow guest user detection

// Check if module is in cache

// Check this question

// Create a button for toolbar tab

// Create a new module (and put it into the cache)

// Create the layout of this container

// Decide if to use a sequenciador?

// Disable edit buttton

// Disable mathquill

// Disable on panel which is not standalone

// Dynamically generate the level here!

// Editor panel (embeded in dialog)

// Execute the module function

// Extends Dialog

// Format "name.of.generador.function1;name.of.generator.function2[param1=a, param2='b', param3='c'];···"

// Full panel

// Get cookie for MoodleSession

// Get current user information

// Get information about book id and chapter id (from the current url)

// Get information about the course

// Groups of mquills

// If the widget is a multiplechoice combo

// Inject required dependencies on the page

// Lazy load (it might no be loaded yet)

// Make this dialog draggable

// Mark editor as changed to enable evaluation

// Mostra la barra de copyright

// Multiple choice combo 

// Multiple choice radio and checkbox

// Must ask the server to generate a right_answer for us by sending the def object

// Must create a global dialog

// On first page, chapterid might not appear

// On jquery ready

// Only show the general palette

// Optimitzation (numeric answers can be checked locally)

// Probably will have to process mathjax

// Remove existing widgets from this gid

// Return the exports of the module

// Shoud have a top banner for level and message

// Show all palettes

// Simple or basic quill input

// Skip this question

// Support arrays in answers (always as str)

// TODO support multiple answers

// TODO: create the dynamic element

// TODO: listen to changes to set status to unmodified

// TODO: support multiple answers, ans is an array and ual too!

// TabMenu

// The module cache

// The require function

// Try to ask the server to generate the answer

// Use the MQ-editor online

// Yes

// a := valor; b := valor;  c := valor; 

// a matrix with empty answers

// bottom panel for control buttons

// central panel for qüestion and displaying the mathinput

// cfg.STATUS = 0 incorrecte, cfg.STATUS = 1 correcte, cfg.STATUS < 0 errors 

// clozed input (replace ini with boxes) 

// console.log("Locally? ", editor.getDefinition(), ual);

// contains empty answers

// convert qtype.M (combo) to qtype.Ms (radios)

// create a button to display answer

// create and add button to palette  

// enable general palette

// end loop

// ev.preventDefault();

// must do the binding when closing

// no module.id needed

// no module.loaded needed

// open a dialog with inputs

// open a editordlg

// requires a dialog to ask for parameters in btn_meta.vars array

// set to first palette

// show this palettes

// showAnswer must disable quill on its editor

// showAnswerBtn.on('click', function(ev){

// simple button

// solve problem of display by redrawing

// status = 0 incorrecte, status = 1 correcte, status < 0 errors 

// this.showAnswerBtn.on('click', function(ev){

// webpackBootstrap

//$eg.append(dynEl);

//@override

//Add button to palettes

//Add dialog to body

//Apply weights!!!!

//Assume equally distributed

//Average grade

//Determine which are selected

//Disable edit buttton

//Disable mathquill

//Goal checker

//Indicator that the goal is already reached

//Marker that is dynamically generated for pigen

//Normalize and aggregate weigths

//Num. questions done on category

//Only show the indicator if data-category is set

//Optimization

//Prevent reprocessing

//Show error message

//TAB1

//TAB2 - símbols i constants

//TAB3 - geometria

//TAB4 - intervals

//TAB5- Funcions

//TODO can support many quills

//TODO lunch confetti if succeded

//TODO: Do something with promises

//TODO: How to create the input widget eficienty 

//TODO: decide if can use the comodi based on performance

//This container will contain the instance of the qid in every screen

//all the remaining lpygens are *

//category to check the level of the student

//celebration?

//check if contains a comodi 

//clear the container  

//console.log("Setting initial_latex", obj.initial_latex);

//const dynEl = $('<span data-mq="'+ datos.mq64 +'"></span>');

//const moodleSession = (document.cookie || "").split("MoodleSession=")[1];

//const showAnswerBtn = $('<button class="btn btn pw-me-btn-showanswer" data-toggle="tooltip" title="Mostrar la solució"><i class="fas fa-question-circle"></i></button>') as JQuery<HTMLButtonElement>;

//copy properties from object definition

//create from data-attributes

//created = new MultipleChoiceCombo($el, gid, obj.symbols);

//current level

//fix the problem of wrong length

//getter

//moodleSession = moodleSession.split(";")[0];

//recupera mapa de valors

//remove contents central panel

//s=simple, b=basic, p=panel, c=cloze (requires data-mq-ini)

//self.quill_blocker.addClass('pw-me-blocker');

//setter

//this.quill_el_container.append(showAnswerBtn);

//this.quill_el_container.append(this.showAnswerBtn);

//this.showAnswerBtn = $('<button class="btn btn pw-me-btn-showanswer" data-toggle="tooltip" title="Mostrar la solució"><i class="fas fa-question-circle"></i></button>');

//try to find the category in iapace (only if available)

//use all palettes if not defined
